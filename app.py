from flask import Flask, render_template, request, redirect, url_for, send_from_directory, jsonify
import os
import json
import logging
import requests
import nmap
import dns.resolver

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['RESULTS_FOLDER'] = 'results'
app.config['SECRET_KEY'] = 'supersecretkey'

# Ensure the results directory exists
os.makedirs(app.config['RESULTS_FOLDER'], exist_ok=True)

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def extract_domain(url):
    return url.split('//')[-1].split('/')[0]

def perform_port_scan(domain):
    nm = nmap.PortScanner()
    scan_result = nm.scan(domain, '1-65535')
    return scan_result

def get_vulnerabilities(port, username, password):
    vulnerabilities = []
    try:
        logger.debug(f"Fetching vulnerabilities for port: {port}")
        response = requests.get(f'https://www.opencve.io/api/cve?search={port}', auth=(username, password))
        if response.status_code == 200:
            vulnerabilities = response.json().get('data', [])
        else:
            logger.error(f"Failed to fetch vulnerabilities: {response.status_code} {response.text}")
    except Exception as e:
        logger.error(f"Error getting vulnerabilities: {e}")
    return vulnerabilities

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
        if 'file' not in request.files:
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            return redirect(request.url)
        if file and file.filename.endswith('.json'):
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
            file.save(file_path)
            return redirect(url_for('analyze_file', filename=file.filename))
    return render_template('upload.html')

@app.route('/analyze/<filename>')
def analyze_file(filename):
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    try:
        data = load_json(file_path)
        extracted_data = extract_data(data)
        domain = extract_domain(extracted_data.get('url'))
        dns_info = get_dns_info(domain)
        port_scan = perform_port_scan(domain)
        vulnerabilities = []
        for port in port_scan['scan'][domain]['tcp']:
            vulns = get_vulnerabilities(port, 'darth_daddio', '3p$ALN9$bhVzn6f')
            vulnerabilities.extend(vulns)
        results = {
            'url': extracted_data.get('url'),
            'dns_info': dns_info,
            'port_scan': port_scan,
            'vulnerabilities': vulnerabilities
        }
        results_file = save_results_to_json(results, domain)
        return redirect(url_for('download_file', filename=results_file))
    except Exception as e:
        logger.error(f"Error analyzing file {filename}: {e}")
        return render_template('error.html', error=str(e))

@app.route('/realtime', methods=['GET', 'POST'])
def realtime():
    if request.method == 'POST':
        target = request.form['target']
        try:
            logger.debug(f"Starting real-time recon for target: {target}")
            domain = extract_domain(target)
            dns_info = get_dns_info(domain)
            port_scan = perform_port_scan(domain)
            vulnerabilities = []
            for port in port_scan['scan'][domain]['tcp']:
                vulns = get_vulnerabilities(port, 'darth_daddio', '3p$ALN9$bhVzn6f')
                vulnerabilities.extend(vulns)
            results = {
                'url': target,
                'dns_info': dns_info,
                'port_scan': port_scan,
                'vulnerabilities': vulnerabilities
            }
            results_file = save_results_to_json(results, domain)
            return redirect(url_for('download_file', filename=results_file))
        except Exception as e:
            logger.error(f"Error performing real-time recon: {e}")
            return render_template('error.html', error=str(e))
    return render_template('realtime.html')

def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def extract_data(data):
    return {'url': data.get('url')}

def get_dns_info(domain):
    resolver = dns.resolver.Resolver()
    answer = resolver.resolve(domain, 'A')
    return [rdata.to_text() for rdata in answer]

def save_results_to_json(results, domain):
    filename = f"{domain}_results.json"
    file_path = os.path.join(app.config['RESULTS_FOLDER'], filename)
    with open(file_path, 'w') as file:
        json.dump(results, file, indent=4)
    return filename

@app.route('/download/<filename>')
def download_file(filename):
    return send_from_directory(app.config['RESULTS_FOLDER'], filename)

@app.route('/view_results/<filename>')
def view_results(filename):
    file_path = os.path.join(app.config['RESULTS_FOLDER'], filename)
    with open(file_path, 'r') as file:
        results = json.load(file)
    return render_template('view_results.html', results=results)

if __name__ == '__main__':
    app.run(debug=True)
